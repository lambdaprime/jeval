
*jeval* - command line Java code evaluator. It binds all standard streams to support piping and reading from stdin.

lambdaprime <id.blackmesa@gmail.com>

* Usage

java -jar jeval.jar [ <JAVA_SCRIPT> | -e <JAVA_SNIPPET> ]

Where: 

JAVA_SCRIPT - jshell script file to be executed

JAVA_SNIPPET - Java expression. If you are entering more than one expression please surround JAVA_SNIPPET with "{}". See examples for details. 

** Predefined variables

BufferedReader stdin = new BufferedReader(new InputStreamReader(in))

** Default imports

#+BEGIN_EXAMPLE
java.util.stream.IntStream.*
java.util.stream.Collectors.*
java.lang.System.*
java.nio.file.Files.*
java.lang.Math.*

java.util.*
java.util.stream.*
java.io.*
java.nio.*
java.nio.file.*
javax.xml.parsers.*
javax.xml.xpath.*
java.net.*
org.w3c.dom.*
#+END_EXAMPLE


* Examples

For convenience of using *jeval* you can define an alias:

#+BEGIN_EXAMPLE
$ alias jeval="~/jdk-9/bin/java -Xmn64m -Xms128m -Xmx512m -Xss1024k -XX:+UseParallelGC -Xnoclassgc -Xshare:off -noverify -jar jeval.jar"
#+END_EXAMPLE

Passing arguments above to JVM will speed-up *jeval* startup time.

- Say hello to the world:

#+BEGIN_EXAMPLE
$ jeval -e 'out.println("Hello world")'
Hello world
#+END_EXAMPLE

- Print sequence of numbers:

#+BEGIN_EXAMPLE
$ jeval -e "range(1,10).forEach(out::println)"
1
2
3
4
5
6
7
8
9
#+END_EXAMPLE

- Read XML and print value of the element using its XPath:

#+BEGIN_EXAMPLE
$ jeval -e '{Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("/home/id/workspace/n.xml")); out.println(XPathFactory.newInstance().newXPath().evaluate("//note/to", d));}'
Tove
#+END_EXAMPLE

- Return integer in binary format:

#+BEGIN_EXAMPLE
$ jeval -e "Integer.toBinaryString(new Scanner(in).nextInt())"
14
"1110"
#+END_EXAMPLE

- or using pipe

#+BEGIN_EXAMPLE
$ echo 14 | jeval -e "Integer.toBinaryString(new Scanner(in).nextInt())"
"1110"
#+END_EXAMPLE

- Create temporary file and return its name

#+BEGIN_EXAMPLE
$ jeval -e 'Files.createTempFile(null, "tmp")'
/tmp/11873450107364399793tmp
#+END_EXAMPLE

- Join lines using "," as delimeter

#+BEGIN_EXAMPLE
$ jeval -e 'stdin.lines().collect(joining(","))'
ab
cd
ef
"ab,cd,ef"
#+END_EXAMPLE

