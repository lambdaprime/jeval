/**
 * gradle clean build
 */
plugins {
    id 'java'
}

repositories {
    mavenCentral()
}
 
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
}

sourceCompatibility = '11'
targetCompatibility = '11'

def releaseDir = "release/${projectName}/${projectName}"

jar { 
    manifest { 
        attributes 'Implementation-Version': "${rootProject.version}",
                   'Main-Class': 'id.jeval.Main', 
                   'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
    }
}

java {
    modularity.inferModulePath = true
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from "$projectDir/libs"
    from jar.archiveFile
    into "${packageDir}/libs"
}

import org.apache.tools.ant.filters.ReplaceTokens
task updateVersion(type:Copy) {
    from "${project.rootDir}/README.md"
    into releaseDir
    filter(ReplaceTokens, tokens: [version: rootProject.version])
}

task copyReadme(type: Copy) {
    from("${project.rootDir}/README.md")
    into("$projectDir/src/main/resources")
}

task createPackage(type: Copy, dependsOn: copyLibs) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    from file("$projectDir/src/jeval")
    from file("$projectDir/src/jeval.bat")
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$packageDir"
    delete "$projectDir/release"
}

compileJava.dependsOn copyReadme
createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

